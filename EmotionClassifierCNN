# -*- coding: utf-8 -*-
"""HumanEmotionClassification_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WItVh7YsmpLfOxbX-9RvZSx8Z9cKDE2C
"""

# Libraries
import pandas as pd
import os
import glob
import opendatasets as od
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2
from PIL import Image
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# from google.colab import files
# uploaded = files.upload()
# importing dataset from kaggle
# !pip install opendatasets
od.download(
    "https://www.kaggle.com/datasets/ameyamote030/einterface-image-dataset")

# datasets path
TRAIN_DIR = "/content/einterface-image-dataset/eINTERFACE_2021_Image/train"
TEST_DIR = "/content/einterface-image-dataset/eINTERFACE_2021_Image/test"
BATCH_SIZE=64

for folder in os.listdir(TRAIN_DIR):
    files = glob.glob(pathname= str(TRAIN_DIR+ '/'+ folder + '/*.jpg'))
    print(f'there are {len(files)} training dataset in folder {folder}')

for folder in os.listdir(TEST_DIR):
    files = glob.glob(pathname= str(TEST_DIR+ '/'+ folder + '/*.jpg'))
    print(f'there are {len(files)} testing dataset in folder {folder}')

# training data preparation
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_data_gen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_data_gen = ImageDataGenerator(rescale = 1/255)

training_Dset = train_data_gen.flow_from_directory(TRAIN_DIR,
                                                 target_size = (128, 128),
                                                 batch_size = BATCH_SIZE,
                                                 class_mode = 'categorical')

test_Dset = test_data_gen.flow_from_directory(TEST_DIR,
                                            target_size = (128, 128),
                                            batch_size = BATCH_SIZE,
                                            class_mode = 'categorical')

training_Dset.class_indices

# CNN classifier
classifier = Sequential()

classifier.add(Conv2D(16, (3, 3), input_shape = (128, 128, 3), activation = 'relu')) # Step1: Convolution
classifier.add(MaxPooling2D(pool_size = (2, 2))) # Step2: Pooling

classifier.add(Conv2D(32, (3, 3), activation = 'relu')) # second convolutional layer
classifier.add(MaxPooling2D(pool_size = (2, 2))) # Pooling

classifier.add(Flatten()) # Step3: Flattening

classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 6, activation = 'softmax'))

classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

classifier.summary()

history = classifier.fit(training_Dset,
                         epochs = 10,
                         validation_data = test_Dset)

classifier.save('EmotionClassifierCNN.h5')  # creates a HDF5 file 'my_model.h5'

# keras.saving.save_model(classifier, 'EmotionClassifierCNN.keras')
# classifier.save("/content/einterface-image-dataset/eINTERFACE_2021_Image/")

classifier.evaluate(test_Dset) # evoluting this model

pd.DataFrame(history.history)[['loss','val_loss']].plot()
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('Loss')

pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('Accuracy')

model_path = "EmotionClassifierCNN.h5"
model_ = keras.models.load_model(model_path)

image = cv2.imread("00000.png")

image_array = Image.fromarray(image, 'RGB')
resize_image = image_array.resize((128, 128))
expand_input = np.expand_dims(resize_image,axis=0)
input_data = np.array(expand_input)
input_data = input_data/255

predict = model_.predict(input_data)
result = predict.argmax()
result

